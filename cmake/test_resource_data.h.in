#pragma once

#include <monad/config.hpp>
#include <monad/core/address.hpp>
#include <monad/db/trie_db.hpp>
#include <monad/test/config.hpp>

#include <ethash/keccak.hpp>
#include <evmc/evmc.h>

#include <filesystem>

MONAD_NAMESPACE_BEGIN

namespace test_resource
{

    inline std::filesystem::path const test_data_dir = "@TEST_DATA_DIR@";
    inline std::filesystem::path const build_dir = "@CMAKE_BINARY_DIR@";
    inline std::filesystem::path const third_party_dir = "@THIRD_PARTY_DIR@";

    // blocks
    inline auto const correct_block_data_dir =
        test_data_dir / "common" / "blocks" / "compressed_blocks";
    inline auto const bad_decompress_block_data_dir =
        test_data_dir / "common" / "blocks" / "bad_decompress_blocks";
    inline auto const bad_decode_block_data_dir =
        test_data_dir / "common" / "blocks" / "bad_decode_blocks";
    inline auto const self_compressed_block_data_dir =
        test_data_dir / "common" / "blocks" / "self_compressed_blocks";

    // genesis
    inline auto const ethereum_genesis_dir =
        test_data_dir / "common" / "genesis" / "ethereum";

    // ethereum tests
    inline auto const ethereum_tests_dir = third_party_dir / "ethereum-tests";

    inline auto const checkpoint_dir = test_data_dir / "common" / "checkpoint";
}

MONAD_NAMESPACE_END

MONAD_TEST_NAMESPACE_BEGIN

inline auto const a_code =
    evmc::from_hex("7ffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffff7fffffffffffffffffffffffffffffffffffffffffff"
                   "ffffffffffffffffffffff0160005500")
        .value();
inline auto const a_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(a_code.data(), a_code.size()));
inline auto const a_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(a_code));
inline auto const b_code =
    evmc::from_hex("60047ffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffffffff0160005500")
        .value();
inline auto const b_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(b_code.data(), b_code.size()));
inline auto const b_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(b_code));
inline auto const c_code =
    evmc::from_hex("60017ffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffffffff0160005500")
        .value();
inline auto const c_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(c_code.data(), c_code.size()));
inline auto const c_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(c_code));
inline auto const d_code = evmc::from_hex("600060000160005500").value();
inline auto const d_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(d_code.data(), d_code.size()));
inline auto const d_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(d_code));
inline auto const e_code =
    evmc::from_hex("7ffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                   "fffffffffff60010160005500")
        .value();
inline auto const e_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(e_code.data(), e_code.size()));
inline auto const e_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(e_code));
inline auto const h_code =
    evmc::from_hex("600060006000600060006004356101000162fffffff100").value();
inline auto const h_code_hash =
    std::bit_cast<bytes32_t>(ethash::keccak256(h_code.data(), h_code.size()));
inline auto const h_code_analysis =
    std::make_shared<CodeAnalysis>(analyze(h_code));

inline void load_db(TrieDb &db, uint64_t const n)
{
    db.set_block_number(n);
    db.commit(
        StateDeltas{
            {a,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = a_code_hash}},
                 .storage =
                     {{bytes32_t{},
                       {bytes32_t{},
                        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe_bytes32}}}}},
            {b,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = b_code_hash}}}},
            {0x0000000000000000000000000000000000000102_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = c_code_hash}}}},
            {0x0000000000000000000000000000000000000103_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = d_code_hash}}}},
            {0x0000000000000000000000000000000000000104_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9ce,
                          .code_hash = e_code_hash}}}},
            {0x2adc25665018aa1fe0e6bc666dac8fc2697ff9ba_address,
             StateDelta{
                 .account = {std::nullopt, Account{.balance = 0x7024c}}}},
            {0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{.balance = 0xba1a9ce0b9aa781, .nonce = 1}}}},
            {0xcccccccccccccccccccccccccccccccccccccccc_address,
             StateDelta{
                 .account =
                     {std::nullopt,
                      Account{
                          .balance = 0xba1a9ce0ba1a9cf,
                          .code_hash = h_code_hash}}}}},
        Code{
            {a_code_hash, a_code_analysis},
            {b_code_hash, b_code_analysis},
            {c_code_hash, c_code_analysis},
            {d_code_hash, d_code_analysis},
            {e_code_hash, e_code_analysis},
            {h_code_hash, h_code_analysis}});
}

MONAD_TEST_NAMESPACE_END
