name: Compiler Benchmarks

on:
  pull_request:
     ignore-paths:
       - 'README.md'
       - '.gitignore'
       - 'LICENSE'

jobs:
    build:
        name: Benchmark compiler
        runs-on: ubuntu-24.04
        strategy:
          matrix:
            compiler: [{CXX: g++-13, CC: gcc-13}, {CXX: clang++-18, CC: clang-18}]

        steps:
            - name: Generate token
              # Use the Github App private key to request an installation
              # token with read-only access to the organization's private
              # repositories. This token is then used in the checkout step
              # (but not in subsequent steps that create releases and upload
              # assets, those still use the default token that has write
              # access to the current repository).
              id: generate_token
              uses: tibdex/github-app-token@v2
              with:
                app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
                private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
                # Limit permissions to what we need (these need to be
                # configured in the app settings as well).
                permissions: >-
                  {"contents": "read"}

            - name: Tell git to do submodules in parallel
              run: |
                git config --global submodule.fetchJobs "$(nproc)"

            - name: Check out PR base
              uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                ref: ${{ github.event.pull_request.base.sha }}
                path: base-compiler
                submodules: recursive

            - name: Check out PR head
              uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                ref: ${{ github.event.pull_request.head.sha }}
                path: head-compiler
                submodules: recursive

            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    libbenchmark-dev    \
                    libcli11-dev        \
                    libgmock-dev        \
                    libgtest-dev        \
                    ninja-build

            # There's a missing #include in evmc's tests that causes some of its
            # code to break when compiled against the C++ standard library
            # supplied with GCC 14. We could work around this by forking evmc,
            # but it's easier just to do this for the time being.
            - name: Remove incompatible libgcc
              run: |
                sudo apt remove -y libgcc-14-dev

            - name: Build base compiler
              working-directory: base-compiler
              run: |
                cmake -S . -B build                                 \
                  -G Ninja                                          \
                  -DCMAKE_BUILD_TYPE=Release                        \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}      \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}
                cmake --build build

            - name: Build head compiler
              working-directory: head-compiler
              run: |
                cmake -S . -B build                                 \
                  -G Ninja                                          \
                  -DCMAKE_BUILD_TYPE=Release                        \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}      \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}
                cmake --build build

            - name: Run benchmarks
              run: |
                # Can't run yet as benchmarks aren't in main
                # base-compiler/build/src/test/blockchain/blockchain-test-benchmarks  \
                #  --benchmark_out=base_runtime_benchmarks.json                      \
                #  --benchmark_out_format=json
                head-compiler/build/src/test/blockchain/blockchain-test-benchmarks  \
                  --benchmark_out=head_runtime_benchmarks.json                      \
                  --benchmark_out_format=json
                cat *.json