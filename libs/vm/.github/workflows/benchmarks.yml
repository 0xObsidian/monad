name: Compiler Benchmarks

on:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review, review_requested]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'LICENSE'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    build:
        name: Benchmark compiler
        runs-on: ubuntu-24.04
        if: github.event.pull_request.draft == false
        permissions:
          pull-requests: write
        strategy:
          matrix:
            compiler: [{CXX: g++-13, CC: gcc-13}, {CXX: clang++-18, CC: clang-18}]

        steps:
            - name: Generate token
              # Use the Github App private key to request an installation
              # token with read-only access to the organization's private
              # repositories. This token is then used in the checkout step
              # (but not in subsequent steps that create releases and upload
              # assets, those still use the default token that has write
              # access to the current repository).
              id: generate_token
              uses: tibdex/github-app-token@v2
              with:
                app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
                private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
                # Limit permissions to what we need (these need to be
                # configured in the app settings as well).
                permissions: >-
                  {"contents": "read"}

            - name: Tell git to do submodules in parallel
              run: |
                git config --global submodule.fetchJobs "$(nproc)"

            - name: Check out PR base
              uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                ref: ${{ github.event.pull_request.base.sha }}
                path: base-compiler
                submodules: recursive

            - name: Check out PR head
              uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                ref: ${{ github.event.pull_request.head.sha }}
                path: head-compiler
                submodules: recursive

            - name: Install uv
              uses: astral-sh/setup-uv@v5

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: head-compiler/scripts/benchmark-analysis/.python-version

            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    libbenchmark-dev    \
                    libcli11-dev        \
                    libgmock-dev        \
                    libgtest-dev        \
                    ninja-build

            # There's a missing #include in evmc's tests that causes some of its
            # code to break when compiled against the C++ standard library
            # supplied with GCC 14. We could work around this by forking evmc,
            # but it's easier just to do this for the time being.
            - name: Remove incompatible libgcc
              run: |
                sudo apt remove -y libgcc-14-dev

            - name: Build base compiler
              working-directory: base-compiler
              run: |
                cmake -S . -B build                                 \
                  -G Ninja                                          \
                  -DCMAKE_BUILD_TYPE=Release                        \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}      \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}
                cmake --build build             \
                  -t blockchain-test-benchmarks \
                  -t compile-benchmarks

            - name: Build head compiler
              working-directory: head-compiler
              run: |
                cmake -S . -B build                                 \
                  -G Ninja                                          \
                  -DCMAKE_BUILD_TYPE=Release                        \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}      \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}
                cmake --build build             \
                  -t blockchain-test-benchmarks \
                  -t compile-benchmarks

            - name: Run benchmarks
              run: |
                # Script doesn't exist in the base compiler yet
                head-compiler/scripts/report-benchmarks.sh                            \
                  base-compiler/build/src/test/blockchain/blockchain-test-benchmarks  \
                  base_runtime_benchmarks.json
                head-compiler/scripts/report-benchmarks.sh                            \
                  head-compiler/build/test/blockchain/blockchain-test-benchmarks  \
                  head_runtime_benchmarks.json

            - name: Run compile benchmarks
              run: |
                # Script doesn't exist in the base compiler yet
                head-compiler/scripts/report-benchmarks.sh                                  \
                  base-compiler/build/src/test/compile_benchmarks/compile-benchmarks  \
                  base_compile_benchmarks.json
                head-compiler/scripts/report-benchmarks.sh                                  \
                  head-compiler/build/test/compile_benchmarks/compile-benchmarks  \
                  head_compile_benchmarks.json

            - name: Compare benchmarks
              id: compare-benchmarks
              env:
                BASE: ${{ github.event.pull_request.base.sha }}
                HEAD: ${{ github.event.pull_request.head.sha }}
                COMPILER: ${{ matrix.compiler.CXX }}
              run: |
                {
                  echo 'BENCHMARK_MD<<EOF'
                  echo "## Benchmark Results (\`$COMPILER\`)"

                  echo "- Old commit: $BASE"
                  echo "- New commit: $HEAD"

                  echo "### Run Time"
                  uv run                                                    \
                    --directory head-compiler/scripts/benchmark-analysis    \
                    compare-benchmarks                                      \
                    --type run                                              \
                    --before $GITHUB_WORKSPACE/base_runtime_benchmarks.json \
                    --after $GITHUB_WORKSPACE/head_runtime_benchmarks.json

                  echo "### Compile Time"
                  uv run                                                    \
                    --directory head-compiler/scripts/benchmark-analysis    \
                    compare-benchmarks                                      \
                    --type compile                                          \
                    --before $GITHUB_WORKSPACE/base_compile_benchmarks.json \
                    --after $GITHUB_WORKSPACE/head_compile_benchmarks.json
                  echo EOF
                } >> "$GITHUB_ENV"

            - name: Post summary comment
              uses: actions/github-script@v7
              with:
                script: |
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: process.env.BENCHMARK_MD
                  })
