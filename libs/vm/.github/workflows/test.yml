name: Compiler Tests

on:
  push:

jobs:
    build:
        name: Test compiler
        runs-on: ubuntu-24.04
        strategy:
          matrix:
            CMAKE_BUILD_TYPE: [RelWithDebInfo, Debug]
            compiler: [{CXX: g++-13, CC: gcc-13}, {CXX: clang++-18, CC: clang-18}]

        steps:
            - name: Generate token
              # Use the Github App private key to request an installation
              # token with read-only access to the organization's private
              # repositories. This token is then used in the checkout step
              # (but not in subsequent steps that create releases and upload
              # assets, those still use the default token that has write
              # access to the current repository).
              id: generate_token
              uses: tibdex/github-app-token@v2
              with:
                app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
                private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
                # Limit permissions to what we need (these need to be
                # configured in the app settings as well).
                permissions: >-
                  {"contents": "read"}

            - uses: actions/checkout@v4
              with:
                submodules: true
                path: compiler
            
            - name: Check out EVMC
              uses: actions/checkout@v4
              with:
                repository: ethereum/evmc
                path: evmc

            - name: Check out Monad core
              uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                repository: monad-crypto/monad
                path: monad
                submodules: recursive
                ref: bruce/jit-vm
 
            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    llvm-18-dev         \
                    libcli11-dev        \
                    libgtest-dev

            - name: Install Monad client dependencies
              working-directory: monad
              run: |
                sudo ./scripts/ubuntu-build/install-boost.sh
                sudo ./scripts/ubuntu-build/install-deps.sh
                sudo ./scripts/ubuntu-build/install-tools.sh
                sudo apt install -y     \
                    libarchive-dev      \
                    libbrotli-dev       \
                    libcap-dev          \
                    libcli11-dev        \
                    libgmp-dev          \
                    libtbb-dev          \
                    libzstd-dev

            - name: Build compiler
              working-directory: compiler
              run: |
                cmake -S . -B build                                 \
                  -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}      \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}   \
                  -DLLVM_DIR=$(llvm-config-18 --cmakedir)
                cmake --build build

            - name: Run tests
              working-directory: compiler
              run: |
                ctest                     \
                  --test-dir build        \
                  --output-on-failure

            - name: Build EVMC tools
              working-directory: evmc
              run: |
                cmake -S . -B build \
                  -DEVMC_TESTING=On
                cmake --build build

            - name: Run compatibility tests
              run: |
                evmc/build/bin/evmc-vmtester compiler/build/src/vm/libmonad-compiler-vm.so

            - name: Build Monad client
              working-directory: monad
              env:
                CC: ${{ matrix.compiler.CC }}
                CXX: ${{ matrix.compiler.CXX }}
                CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
                CFLAGS: "-march=haswell"
                CXXFLAGS: "-march=haswell"
                ASMFLAGS: "-march=haswell"
              run: |
                ./scripts/configure.sh
                VERBOSE=1 \
                cmake \
                  --build build \
                  --config RelWithDebInfo \
                  --target monad-ethereum-test

            - name: Run Ethereum tests
              env:
                MONAD_COMPILER_VM: compiler/build/src/vm/libmonad-compiler-vm.so
              run: |
                monad/build/test/ethereum_test/monad-ethereum-test \
                  --gtest_filter='BlockchainTests.GeneralStateTests/stExample/add11.json'

    code-quality:
        name: Code quality checks
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
              with:
                submodules: true

            - name: Formatting Check
              uses: jidicula/clang-format-action@v4.13.0
              with:
                exclude-regex: '(build|third_party)'
                clang-format-version: 18

            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    llvm-18-dev         \
                    libcli11-dev        \
                    libgtest-dev

            - name: Set up build system
              run: |
                cmake -S . -B build

            - name: Run clang-tidy checks
              run: |
                ./scripts/apply-clang-tidy-fixes.sh build run-clang-tidy-18
                if [[ ! -z "$(git status --untracked-files=no --porcelain)" ]]; then
                  echo "Fixes applied; please re-run locally and commit!"
                  exit 1
                fi

    documentation:
        name: Build documentation
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
              with:
                submodules: true

            - name: Install Doxygen
              run: |
                sudo apt install -y doxygen

            - name: Build documentation
              run: |
                doxygen