name: Compiler Tests

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
    build:
        name: Test compiler
        runs-on: ubuntu-24.04
        strategy:
          matrix:
            build:
              - CMAKE_BUILD_TYPE: RelWithDebInfo
                TOOLCHAIN: gcc-avx2
              - CMAKE_BUILD_TYPE: Debug
                TOOLCHAIN: gcc-asan
            compiler:
              - CXX: g++-13
                CC: gcc-13
              - CXX: clang++-18
                CC: clang-18

        steps:
            - name: Generate token
              # Use the Github App private key to request an installation
              # token with read-only access to the organization's private
              # repositories. This token is then used in the checkout step
              # (but not in subsequent steps that create releases and upload
              # assets, those still use the default token that has write
              # access to the current repository).
              id: generate_token
              uses: tibdex/github-app-token@v2
              with:
                app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
                private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
                # Limit permissions to what we need (these need to be
                # configured in the app settings as well).
                permissions: >-
                  {"contents": "read"}

            - name: Tell git to do submodules in parallel
              run: |
                git config --global submodule.fetchJobs "$(nproc)"

            - uses: actions/checkout@v4
              with:
                token: ${{ steps.generate_token.outputs.token }}
                submodules: recursive

            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    libbenchmark-dev    \
                    libcli11-dev        \
                    libgmock-dev        \
                    libgtest-dev        \
                    ninja-build         \
                    valgrind

            # There's a missing #include in evmc's tests that causes some of its
            # code to break when compiled against the C++ standard library
            # supplied with GCC 14. We could work around this by forking evmc,
            # but it's easier just to do this for the time being.
            - name: Remove incompatible libgcc
              run: |
                sudo apt remove -y libgcc-14-dev

            - name: Build compiler
              run: |
                cmake -S . -B build                                                           \
                  -G Ninja                                                                    \
                  -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/${{ matrix.build.TOOLCHAIN }}.cmake \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build.CMAKE_BUILD_TYPE }}                     \
                  -DCMAKE_C_COMPILER=${{ matrix.compiler.CC }}                                \
                  -DCMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }}
                cmake --build build

            - name: Run unit tests
              env:
                UBSAN_OPTIONS: "halt_on_error=1"
              run: ./build/test/unit/unit-tests

            - name: Run compiler Ethereum tests
              env:
                UBSAN_OPTIONS: "halt_on_error=1"
              run: |
                ulimit -s 131072
                ./build/test/blockchain/compiler-blockchain-tests

            - name: Run interpreter Ethereum tests
              env:
                UBSAN_OPTIONS: "halt_on_error=1"
              run: |
                ulimit -s 131072
                ./build/test/blockchain/interpreter-blockchain-tests

    code-quality:
        name: Code quality checks
        runs-on: ubuntu-24.04
        steps:
            - name: Generate token
              id: generate_token
              uses: tibdex/github-app-token@v2
              with:
                app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
                private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
                # Limit permissions to what we need (these need to be
                # configured in the app settings as well).
                permissions: >-
                  {"contents": "read"}

            - name: Tell git to do submodules in parallel
              run: |
                git config --global submodule.fetchJobs "$(nproc)"

            - uses: actions/checkout@v4
              with:
                submodules: recursive
                token: ${{ steps.generate_token.outputs.token }}

            - name: Formatting Check
              uses: jidicula/clang-format-action@v4.13.0
              with:
                exclude-regex: '(build|third_party)'
                clang-format-version: 18

            - name: Install dependencies
              run: |
                sudo apt install -y     \
                    build-essential     \
                    cmake               \
                    libbenchmark-dev    \
                    libcli11-dev        \
                    libgtest-dev        \
                    valgrind

            - name: Set up build system
              run: |
                cmake -S . -B build

            - name: Run clang-tidy checks
              run: |
                ./scripts/apply-clang-tidy-fixes.sh build run-clang-tidy-18
                if [[ ! -z "$(git status --untracked-files=no --porcelain)" ]]; then
                  echo "Fixes applied; please re-run locally and commit!"
                  exit 1
                fi

    python-code-quality:
        name: Python code quality checks
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
              with:
                submodules: false

            - name: Install uv
              uses: astral-sh/setup-uv@v5

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: scripts/benchmark-analysis/.python-version

            - name: Check Python code
              working-directory: scripts/benchmark-analysis
              run: make check

    documentation:
        name: Build documentation
        runs-on: ubuntu-24.04
        steps:
            - uses: actions/checkout@v4
              with:
                submodules: false

            - name: Install Doxygen
              run: |
                sudo apt install -y doxygen

            - name: Build documentation
              run: |
                doxygen
