#include <monad/rlp/encode_helpers.hpp>
#include <monad/core/account.hpp>

#include <monad/core/account.hpp>

#include <gtest/gtest.h>

using namespace monad;
using namespace monad::rlp;

TEST(Rlp_Account, Encode)
{
    using namespace intx;
    using namespace evmc::literals;

    static constexpr uint256_t b{24'000'000};
    static constexpr bytes32_t storage_root{
        0xbea34dd04b09ad3b6014251ee24578074087ee60fda8c391cf466dfe5d687d7b_bytes32};
    static constexpr bytes32_t code_hash{
        0x6b8cebdc2590b486457bbb286e96011bdd50ccc1d8580c1ffb3c89e828462283_bytes32};
    Account const a{.balance = b, .code_hash = code_hash};
    const byte_string rlp_account{
        0xf8, 0x48, 0x80, 0x84, 0x01, 0x6e, 0x36, 0x00, 0xa0, 0xbe, 0xa3,
        0x4d, 0xd0, 0x4b, 0x09, 0xad, 0x3b, 0x60, 0x14, 0x25, 0x1e, 0xe2,
        0x45, 0x78, 0x07, 0x40, 0x87, 0xee, 0x60, 0xfd, 0xa8, 0xc3, 0x91,
        0xcf, 0x46, 0x6d, 0xfe, 0x5d, 0x68, 0x7d, 0x7b, 0xa0, 0x6b, 0x8c,
        0xeb, 0xdc, 0x25, 0x90, 0xb4, 0x86, 0x45, 0x7b, 0xbb, 0x28, 0x6e,
        0x96, 0x01, 0x1b, 0xdd, 0x50, 0xcc, 0xc1, 0xd8, 0x58, 0x0c, 0x1f,
        0xfb, 0x3c, 0x89, 0xe8, 0x28, 0x46, 0x22, 0x83};
    auto const encoded_account = encode_account(a, storage_root);
    EXPECT_EQ(encoded_account, rlp_account);
}
