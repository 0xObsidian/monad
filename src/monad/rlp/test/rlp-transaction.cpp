#include <gtest/gtest.h>
#include <monad/core/transaction.hpp>
#include <monad/rlp/encode_helpers.hpp>

using namespace monad;

// Example data from: https://eips.ethereum.org/EIPS/eip-155
TEST(Rlp_Transaction, EncodeLegacy)
{
    using namespace intx;
    using namespace evmc::literals;

    static constexpr auto price{20'000'000'000};
    static constexpr auto amount{0xde0b6b3a7640000_u128};
    static constexpr auto to_addr{
        0x3535353535353535353535353535353535353535_address};
    static constexpr auto r{
        0x28ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276_u256};
    static constexpr auto s{
        0x67cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83_u256};

    const monad::Transaction t{
        .sc = {.r = r, .s = s}, // no chain_id in legacy transactions
        .nonce = 9,
        .gas_price = price,
        .gas_limit = 21'000,
        .amount = amount,
        .to = to_addr};
    const monad::byte_string legacy_transaction{
        0xf8, 0x6c, 0x09, 0x85, 0x04, 0xa8, 0x17, 0xc8, 0x00, 0x82, 0x52,
        0x08, 0x94, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
        0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
        0x88, 0x0d, 0xe0, 0xb6, 0xb3, 0xa7, 0x64, 0x00, 0x00, 0x80, 0x1b,
        0xa0, 0x28, 0xef, 0x61, 0x34, 0x0b, 0xd9, 0x39, 0xbc, 0x21, 0x95,
        0xfe, 0x53, 0x75, 0x67, 0x86, 0x60, 0x03, 0xe1, 0xa1, 0x5d, 0x3c,
        0x71, 0xff, 0x63, 0xe1, 0x59, 0x06, 0x20, 0xaa, 0x63, 0x62, 0x76,
        0xa0, 0x67, 0xcb, 0xe9, 0xd8, 0x99, 0x7f, 0x76, 0x1a, 0xec, 0xb7,
        0x03, 0x30, 0x4b, 0x38, 0x00, 0xcc, 0xf5, 0x55, 0xc9, 0xf3, 0xdc,
        0x64, 0x21, 0x4b, 0x29, 0x7f, 0xb1, 0x96, 0x6a, 0x3b, 0x6d, 0x83};
    auto const legacy_rlp_transaction = monad::rlp::encode(t);
    EXPECT_EQ(legacy_rlp_transaction, legacy_transaction);
}

TEST(Rlp_Transaction, EncodeEip155)
{
    using namespace intx;
    using namespace evmc::literals;

    static constexpr auto price{20'000'000'000};
    static constexpr auto amount{0xde0b6b3a7640000_u128};
    static constexpr auto to_addr{
        0x3535353535353535353535353535353535353535_address};
    static constexpr auto r{
        0x28ef61340bd939bc2195fe537567866003e1a15d3c71ff63e1590620aa636276_u256};
    static constexpr auto s{
        0x67cbe9d8997f761aecb703304b3800ccf555c9f3dc64214b297fb1966a3b6d83_u256};

    const monad::Transaction t{
        .sc = {.r = r, .s = s, .chain_id = 5}, // Goerli
        .nonce = 9,
        .gas_price = price,
        .gas_limit = 21'000,
        .amount = amount,
        .to = to_addr};
    const monad::byte_string eip155_transaction{
        0xf8, 0x6c, 0x09, 0x85, 0x04, 0xa8, 0x17, 0xc8, 0x00, 0x82, 0x52,
        0x08, 0x94, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
        0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
        0x88, 0x0d, 0xe0, 0xb6, 0xb3, 0xa7, 0x64, 0x00, 0x00, 0x80, 0x2d,
        0xa0, 0x28, 0xef, 0x61, 0x34, 0x0b, 0xd9, 0x39, 0xbc, 0x21, 0x95,
        0xfe, 0x53, 0x75, 0x67, 0x86, 0x60, 0x03, 0xe1, 0xa1, 0x5d, 0x3c,
        0x71, 0xff, 0x63, 0xe1, 0x59, 0x06, 0x20, 0xaa, 0x63, 0x62, 0x76,
        0xa0, 0x67, 0xcb, 0xe9, 0xd8, 0x99, 0x7f, 0x76, 0x1a, 0xec, 0xb7,
        0x03, 0x30, 0x4b, 0x38, 0x00, 0xcc, 0xf5, 0x55, 0xc9, 0xf3, 0xdc,
        0x64, 0x21, 0x4b, 0x29, 0x7f, 0xb1, 0x96, 0x6a, 0x3b, 0x6d, 0x83};
    auto const eip155_rlp_transaction = monad::rlp::encode(t);
    EXPECT_EQ(eip155_rlp_transaction, eip155_transaction);
}
